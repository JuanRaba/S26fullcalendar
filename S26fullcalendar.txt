02 Integrando Fullcalendar
rails new .
HEADS UP! i18n 1.1 changed fallbacks to exclude default locale.
But that may break your application.

Please check your Rails app for 'config.i18n.fallbacks = true'.
If you're using I18n (>= 1.1.0) and Rails (< 5.2.2), this should be
'config.i18n.fallbacks = [I18n.default_locale]'.
If not, fallbacks will be broken in your app by I18n 1.1.x.

For more info see:
https://github.com/svenfuchs/i18n/releases/tag/v1.1.0

         run  bundle exec spring binstub --all

yarn add fullcalendar
info Direct dependencies
└─ fullcalendar@3.9.0
info All dependencies
├─ fullcalendar@3.9.0
├─ jquery@3.3.1
└─ moment@2.23.0
rails g controller pages index

https://fullcalendar.io/docs >introduction >loading the code
app..js
//= require jquery/dist/jquery
//= require moment/moment
//= require fullcalendar/dist/fullcalendar
app.css
 *= require fullcalendar/dist/fullcalendar

<div id='calendar'></div>

<script>
  $('#calendar').fullCalendar({
    weekends: false // will hide Saturdays and Sundays
  });
</script>

03 Agregando eventos
en documentacion ve event_data/events_array
https://fullcalendar.io/docs/event-data
<script>
  $('#calendar').fullCalendar({
    events: [
      {
        title: "evento 1",
        start: '2018-12-26',
        end: '2018-12-30'
      }
    ]
  });
</script>
https://fullcalendar.io/docs/event-object

04 Guardando eventos en la bd
rails g scaffold event title:string start:datetime
db:migrate
gem 'faker'
bundle
20.times do
  start_at = Random.rand(10).days.ago + 5.days
  Event.create!(title: Faker::Name.name, start: start_at)  
end
db:seed

05 Mostrando eventos en el calendario
usando JSON
    events: <%= raw @events.to_json %>

06 Eventos con campos distintos. reescribiendo to_json
si un campo se llama diferente
events: <%= raw @events.to_json(methods: :start2) %>
class Event < ApplicationRecord
  def start2
    start    
  end
end
DANGER def start returning start
  def to_json(options = {})
    options[:except] = [:start2, :created_at]
    options[:methods] = :start
    super
  end

07 eventos por Ajax
http://localhost:3000/events.json
    events: '<%= events_path %>'
esto utiliza el json builder
_event.json.jbuilder
json.extract! event, :id, :title, :start, :created_at, :updated_at
json.url event_url(event, format: :json)

pero se puede hacer tmbn en el controler
  def index
    @events = Event.all
    respond_to do |format|
      format.html
      format.json {render json: @events.to_json }
    end
  end

08 reagendando eventos
campo de evento
editable: true (en index marca todos)
en el json builder (marca cada uno)
json.set! :editable, true
if Date.today < event.start
  json.set! :editable, true
end

en el modelo
  def editable?
    Date.today < start
  end
json.set! :editable, event.editable?

otra forma (hay q quitar la interrogacion o no funciona)
@events.to_json(methods: :editable)

09 capturando el día a reagendar
    events: '<%= events_path %>',
    eventDrop: function( event, delta, revertFunc, jsEvent, ui, view ) { 
      console.log("eventDrop");
      console.log(event.start);
    }


